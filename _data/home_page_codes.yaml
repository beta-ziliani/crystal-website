-
  name: Syntax
  description: Crystal’s syntax is heavily inspired by Ruby’s, so it feels natural to read and easy to write, and has the added benefit of a lower learning curve for experienced Ruby devs.
  read_more_url: https://crystal-lang.org/reference/getting_started/
  read_more_label: Start learning Crystal
  code: sample_server.md
  class: syntax
  run: true
-
  name: Type system
  description: Crystal is statically type checked, so any type errors will be caught early by the compiler rather than fail on runtime. Moreover, and to keep the language clean, Crystal has built-in type inference, so most type annotations are unneeded.
  read_more_url: https://crystal-lang.org/reference/syntax_and_semantics/types_and_methods.html
  read_more_label: Read more about Crystal's type system
  code: sample_type_system.md
  class: type-system
  run: true
-
  name: Null reference checks
  description: All types are non-nilable in Crystal, and nilable variables are represented as a union between the type and nil. As a consequence, the compiler will automatically check for null references in compile time, helping prevent the dreadful <a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare" target="_blank">billion-dollar mistake</a>.
  read_more_url:
  read_more_label:
  code: sample_null.md
  class: null-ref
  run: true
-
  name: Macros
  description: Crystal’s answer to metaprogramming is a powerful macro system, which ranges from basic templating and AST inspection, to types inspection and running arbitrary external programs.
  read_more_url: https://crystal-lang.org/reference/syntax_and_semantics/macros.html
  read_more_label: Read more about Macros
  code: sample_macros.md
  class: macros
  run: true
-
  name: Concurrency Model
  description: Crystal uses green threads, called fibers, to achieve concurrency. Fibers communicate with each other using channels, as in Go or Clojure, without having to turn to shared memory or locks.
  read_more_url: https://crystal-lang.org/reference/guides/concurrency.html
  read_more_label: Read more about Crystal's concurrency model
  code: sample_concurrency.md
  class: concurrency
  run: true
-
  name: C-bindings
  description: Crystal has a dedicated syntax to easily call native libraries, eliminating the need to reimplement low-level tasks.
  read_more_url: https://crystal-lang.org/reference/syntax_and_semantics/c_bindings/
  read_more_label: Learn how to bind to C libraries
  code: sample_bindings.md
  class: c_bindings
  run: true
-
  name: Dependencies
  description: Crystal libraries are packed as Shards, and distributed via Git without needing a centralised repository. Built in commands allow dependencies to be easily specified through a YAML file and fetched from their respective repositories.
  read_more_url: https://github.com/crystal-lang/shards
  read_more_label: Read more about Shards in the repo
  code: sample_dependencies.md
  class: dependencies
  run: false
